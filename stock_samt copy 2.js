
$(document).ready(function () {
    //‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• body ‡∏Ç‡∏≠‡∏á table
    fetchProducts();
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    $("#productCodeSearch, #productNameSearch, #option1, #option2, #option3").on("input", function () {
        fetchProducts();
    });


    function fetchProducts() {
        let searchBy = $("#selectedSearchBy").val();
        let productCode = $("#productCodeSearch").val();
        let productName = $("#productNameSearch").val();
        let option1 = $("#option1").prop("disabled") ? "" : $("#option1").val();
        let option2 = $("#option2").prop("disabled") ? "" : $("#option2").val();
        let option3 = $("#option3").prop("disabled") ? "" : $("#option3").val();

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å `localStorage`
        let selectedProducts = JSON.parse(localStorage.getItem("selectedProducts")) || {};

        $.ajax({
            url: "stock_samt_fetch.php",
            type: "POST",
            dataType: "json",
            data: {
                searchBy: searchBy,
                productCode: productCode,
                productName: productName,
                option1: option1,
                option2: option2,
                option3: option3
            },
            success: function (data) {
                let tableBody = $("#tableBody");
                tableBody.empty(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤

                data.forEach((product) => {
                    let rowClass = product.rowColor ? `class='${product.rowColor}'` : "";

                    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Checkbox ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
                    let isChecked = selectedProducts.hasOwnProperty(product.id) ? "checked" : "";
                    let inputValue = selectedProducts[product.id] ? `value="${selectedProducts[product.id]}"` : "";

                    let checkbox = `<div class="input-group">
                                        <div class="input-group-text">
                                            <input class='form-check-input checkbox-select' type='checkbox' name='selected_ids[]' value='${product.id}' id='checkbox_${product.id}' ${isChecked} onchange='toggleInput(this)' />
                                        </div>
                                        <input class='form-control quantity-input' min='1' max='${product.difference}' type='number' id='input_${product.id}' ${inputValue} style='display: ${isChecked ? "block" : "none"}; width: 70px;' />
                                    </div>`;

                    let row = `<tr ${rowClass} data-id='${product.id}'>
                                    <td class='text-center' style='vertical-align: middle;'>${checkbox}</td>
                                    <td>${product.index || ""}</td>
                                    <td>${product.code || ""}</td>
                                    <td>${product.collection || ""}</td>
                                    <td>${product.name || ""}</td>
                                    <td>${product.hands || ""}</td>
                                    <td>${product.color || ""}</td>
                                    <td>${product.size || ""}</td>
                                    <td class='text-end'>${product.cost_price || ""}</td>
                                    <td class='text-end'>${product.sale_price || ""}</td>
                                    <td class='text-end'>${product.vat_price || ""}</td>
                                    <td class='text-end' style='color: ${product.textColor}; background: ${product.backgroundColor};'>${product.difference || ""}</td>
                                    <td class='text-center'></td>
                                </tr>`;

                    tableBody.append(row);
                });

                // ‚úÖ 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Checkbox & Input Number ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                $(".checkbox-select").on("change", function () {
                    updateSelectedProducts();
                });

                $(".quantity-input").on("input", function () {
                    updateSelectedProducts();
                });

                restoreSelections(); // ‚úÖ ‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô Checkbox ‡πÅ‡∏•‡∏∞ Input Number
            },
            error: function (xhr, status, error) {
                console.error("Error fetching data:", error);
            }
        });
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏á `localStorage`
    function updateSelectedProducts() {
        let selectedProducts = {};

        $(".checkbox-select:checked").each(function () {
            let productId = $(this).val();
            let quantity = $("#input_" + productId).val();
            selectedProducts[productId] = quantity ? quantity : "";
        });

        localStorage.setItem("selectedProducts", JSON.stringify(selectedProducts));
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô Checkbox ‡πÅ‡∏•‡∏∞ Input Number
    function restoreSelections() {
        let selectedProducts = JSON.parse(localStorage.getItem("selectedProducts")) || {};

        $(".checkbox-select").each(function () {
            let productId = $(this).val();
            if (selectedProducts.hasOwnProperty(productId)) {
                $(this).prop("checked", true);
                $("#input_" + productId).val(selectedProducts[productId]).show();
            }
        });
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ Input Number ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ Checkbox ‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    window.toggleInput = function (checkbox) {
        const productId = $(checkbox).val();
        const inputField = $('#input_' + productId);

        if (checkbox.checked) {
            inputField.show().focus();
        } else {
            inputField.val('').hide();
        }

        updateSelectedProducts(); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏•‡∏á localStorage ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å Checkbox
    };

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á `localStorage`
    function updateSelectedProducts() {
        let selectedProducts = {};

        $(".checkbox-select:checked").each(function () {
            let productId = $(this).val();
            let quantity = $("#input_" + productId).val();
            selectedProducts[productId] = quantity ? quantity : "";
        });

        localStorage.setItem("selectedProducts", JSON.stringify(selectedProducts));
    }
    /* --------------------------------------------------------------------------- */
    function loadOptions(productCode, productName) {
        $.ajax({
            url: "stock_samt_product_options.php",
            type: "POST",
            data: {
                code: productCode,
                name: productName
            },
            dataType: "json",
            success: function (data) {
                console.log("üîπ Data received:", data); // üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö

                function updateDatalist(selector, options) {
                    $(selector).empty(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡∏°‡πà

                    // ‡πÉ‡∏ä‡πâ Set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
                    let uniqueOptions = [...new Set(options)];

                    if (uniqueOptions.length > 0) {
                        uniqueOptions.forEach(function (item) {
                            $(selector).append("<option value='" + item + "'></option>");
                        });
                        $("input[list='" + selector.replace("#", "") + "']").prop("disabled",
                            false);
                    } else {
                        // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô input
                        $("input[list='" + selector.replace("#", "") + "']")
                            .val('')
                            .prop("disabled", true);
                    }
                }

                updateDatalist("#product_option1", data.option1 || []);
                updateDatalist("#product_option2", data.option2 || []);
                updateDatalist("#product_option3", data.option3 || []);
            },
            error: function (xhr, status, error) {
                console.error("AJAX Error: " + status + " - " + error);
            }
        });
    }

    $("#productCodeSearch").on("change", function () {
        let productCode = $(this).val();
        loadOptions(productCode, "");
    });

    $("#productNameSearch").on("change", function () {
        let productName = $(this).val();
        loadOptions("", productName);
    });

    /* ---------------------------------------------------------------------- */
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ checkbox ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    $('input[name="selected_ids[]"]:checked').each(function () {
        $('#input_' + $(this).val()).show(); // ‡πÅ‡∏™‡∏î‡∏á input
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà checkbox "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    $('#checkAll').on('change', function () {
        const isChecked = $(this).prop('checked');

        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å checkbox
        $('input[name="selected_ids[]"]').prop('checked', isChecked);

        // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô input ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if (isChecked) {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å input
            $('input[name="selected_ids[]"]').each(function () {
                $('#input_' + $(this).val()).show();
            });
        } else {
            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å input
            $('input[name="selected_ids[]"]').each(function () {
                $('#input_' + $(this).val()).hide();
            });
        }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á checkbox ‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    $('input[name="selected_ids[]"]').on('change', function () {
        // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô input ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á checkbox ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
        const inputId = '#input_' + $(this).val();
        if ($(this).prop('checked')) {
            $(inputId).show();
        } else {
            $(inputId).hide();
        }

        // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        $('#checkAll').prop(
            'checked',
            $('input[name="selected_ids[]"]').length === $('input[name="selected_ids[]"]:checked').length
        );
    });

    // Hide all details sections initially
    $('#saleDetails').hide();
    $('#takeOutDetails').hide();

    // Event listener for radio button changes
    $('input[name="flexRadioDefault"]').change(function () {
        // Check which radio button is selected
        if ($('#flexRadioDefault1').is(':checked')) {
            $('#saleDetails').show();
            $('#takeOutDetails').hide();
        } else if ($('#flexRadioDefault2').is(':checked')) {
            $('#saleDetails').hide();
            $('#takeOutDetails').show();
        } else if ($('#flexRadioDefault3').is(':checked')) {
            $('#saleDetails').hide();
            $('#takeOutDetails').hide();
        }
    });


    /* ************************************************************************************** */
    // submit function ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Ñ‡∏≠‡∏≠‡∏Å/‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö PR
    $('#submitProductDetails').click(function () {
        // Gather the data from the table
        const productDetails = [];
        var checkStatus = ''; // Get the selected radio button value
        const currentDate = $('#currentDate').val(); // Get the date input value
        var updateForm = $('#updateForm').val();
        var typeStatus = '';
        var storeID = '1';
        var paidOption = '';
        var customerName = '';
        var memo = $('#memo').val();

        let selectedValue = ''; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ selectedValue ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ö‡∏ö let

        $('#productDetails tr').each(function () {
            const row = $(this);
            const qtyInput = row.find('.qty-input');
            const productId = qtyInput.data('product-id');
            console.log(productId);
            const qty = qtyInput.val();

            if (productId && qty) {
                productDetails.push({
                    productId: productId,
                    qty: qty
                });
            }
        });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ radio ‡∏ó‡∏µ‡πà‡∏°‡∏µ name="flexRadioDefault" ‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å radio button ‡∏ó‡∏µ‡πà‡∏°‡∏µ name="flexRadioDefault"
        selectedValue = $('input[name="flexRadioDefault"]:checked').val();
        console.log("Selected Radio Value: " + selectedValue);


        if (selectedValue == 'sale') {
            customerName = $('#cusname').val();
            paidOption = $('#paidOption').val();
            storeID = '1';
            typeStatus = '1';
        } else if (selectedValue == 'out to') {
            customerName = '';
            paidOption = '';
            storeID = $('#stockToOption').val();
            typeStatus = '2'
        } else if (selectedValue == 'sale sample') {
            customerName = $('#cusname').val();
            paidOption = '';
            storeID = '1';
            typeStatus = '3'
        } else {
            if (updateForm == '1') {
                Swal.fire({
                    title: 'Warning',
                    text: 'Please select Stock out for.',
                    icon: 'warning',
                    confirmButtonText: '<i class="fa-solid fa-check"></i> OK',
                    confirmButtonColor: 'gray'
                });
                return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            }
        }

        // ‡πÅ‡∏™‡∏î‡∏á Loading
        Swal.fire({
            title: 'Processing...',
            html: 'Please wait a moment',
            allowOutsideClick: false,
            allowEscapeKey: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });


        // Send an AJAX request to the server
        $.ajax({
            url: 'ajax_POST/update_product_details.php',
            type: 'POST',
            data: JSON.stringify({
                products: productDetails,
                status: checkStatus,
                typeStatus: typeStatus,
                dateSelect: currentDate,
                updateForm: updateForm,
                storeID: storeID, // Include the date in the request
                paidOption: paidOption,
                customerName: customerName,
                selectedValue: selectedValue,
                memo: memo
            }),
            contentType: 'application/json',
            success: function (response) {
                // Handle the server response
                console.log(response);

                Swal.fire({
                    title: 'Success',
                    text: 'Product details updated successfully.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Close the modal
                        $('#previewModal').modal('hide');
                        // Optionally, reload the page or update the table
                        location.reload();
                    }
                });
            },
            error: function (error) {
                console.error(error);

                Swal.fire({
                    title: 'Error',
                    text: 'Failed to update product details.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        });
    });
    /* ****************************************************************************************** */
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Preview
    $('.preview-btn-stockOut').click(function () {
        previewProduct(1)
    });
    $('.preview-btn-pr').click(function () {
        previewProduct(2)
    });

    function previewProduct(statusBtn) {
        var colorText = '';

        if (statusBtn == 1) {
            $('#addTitle').text('Stock Out');
            $('#addTitle').removeClass('bg-info text-white').addClass('bg-warning text-white');
            $('#previewStockOut').show();
            colorText = 'text-danger';
            $('#updateForm').val(1);
        } else if (statusBtn == 2) {
            $('#addTitle').text('PR Create');
            $('#addTitle').removeClass('bg-warning text-white').addClass('bg-info text-white');
            $('#previewStockOut').hide();
            colorText = 'text-success';
            $('#updateForm').val(2);
        }


        // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å checkbox ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        const selectedIds = $('input[name="selected_ids[]"]:checked').map(function () {
            return $(this).val();
        }).get();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input fields
        let hasEmptyQty = false; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ qty ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const productData = selectedIds.map(id => {
            const qty = $('#input_' + id).val(); // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ qty ‡∏à‡∏≤‡∏Å input field
            if (!qty) { // ‡∏ñ‡πâ‡∏≤ qty ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
                hasEmptyQty = true;
            }
            return {
                id: id,
                qty: qty
            };
        }).filter(item => item.qty); // ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ qty ‡∏≠‡∏≠‡∏Å

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Å‡∏°‡∏µ qty ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
        if (hasEmptyQty) {
            Swal.fire({
                title: 'Warning',
                text: 'Please enter the quantity for all selected items.',
                icon: 'warning',
                confirmButtonText: '<i class="fa-solid fa-check"></i> OK',
                confirmButtonColor: 'gray'
            }).then(() => {
                return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î OK
            });
        } else {
            // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            console.log(productData);
        }


        if (selectedIds.length === 0) {
            Swal.fire({
                title: 'No Data',
                text: 'No items selected.',
                icon: 'info',
                confirmButtonText: 'OK'
            });
            return;
        }


        // ‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå
        $.ajax({
            url: 'ajax_GET/get_product_details.php', // URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå PHP ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            type: 'POST',
            data: {
                products: productData // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á qty
            },
            success: function (data) {
                const details = JSON.parse(data);

                let productDetails = '';
                let allTotal = 0; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ `allTotal` ‡πÄ‡∏õ‡πá‡∏ô 0
                let number = 1; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ `number` ‡πÄ‡∏õ‡πá‡∏ô 1
                var totalPrice = 0;
                var vat = 0;

                details.forEach(function (detail) {

                    if (statusBtn == 1) { //Stock out ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å
                        $('#priceLabel').text('Sale Price');
                        $('#priceVatLabel').text('Sale Price(Vat%)');
                        $('#totalVatLabel').text('Total Sale(Vat%)');

                        vat = parseFloat((detail.p_sale_price * detail.p_vat) / 100);
                        totalPrice = detail.qty * (parseFloat(detail.p_sale_price) + vat);
                        allTotal += totalPrice; // Sum the total prices
                        var totalSaleVat = parseFloat(vat) + parseFloat(detail.p_sale_price);

                        productDetails += `
                                        <tr>
                                            <td>${number}</td>
                                            <td>${detail.p_product_code}</td>
                                            <td>${detail.p_product_name}</td>
                                            <td>${detail.p_hands}</td>
                                            <td>${detail.p_color}</td>
                                            <td>${detail.p_size}</td>
                                            <td class='text-end'>${formatPrice(detail.p_sale_price)}</td> <!-- Display price in formatted way -->
                                            <td class='text-end'>${formatPrice(totalSaleVat)}</td> <!-- Display price in formatted way -->
                                            <td class='text-end ${colorText}'>
                                                <input class="form-control qty-input" min="1" type="number" value="${detail.qty}" data-product-id="${detail.p_product_id}" readonly>
                                            </td> <!-- Display qty value -->
                                            <td class='text-end ${colorText}' data-product-id="${detail.p_product_id}">${formatPrice(totalPrice)}</td> <!-- Display total price -->
                                        </tr>
                                    `;
                    } else { //PR Create ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö pr
                        $('#priceLabel').text('Cost Price');
                        $('#priceVatLabel').text('Cost Price(Vat%)');
                        $('#totalVatLabel').text('Total Cost(Vat%)');

                        vat = parseFloat((detail.p_cost_price * detail.p_vat) / 100);
                        totalPrice = detail.qty * (parseFloat(detail.p_cost_price) + vat);
                        allTotal += totalPrice; // Sum the total prices
                        var totalCostVat = parseFloat(vat) + parseFloat(detail.p_cost_price);

                        productDetails += `
                        <tr>
                            <td>${number}</td>
                            <td>${detail.p_product_code}</td>
                            <td>${detail.p_product_name}</td>
                            <td>${detail.p_hands}</td>
                            <td>${detail.p_color}</td>
                            <td>${detail.p_size}</td>
                            <td class='text-end'>${formatPrice(detail.p_cost_price)}</td> <!-- Display price in formatted way -->
                            <td class='text-end'>${formatPrice(totalCostVat)}</td> <!-- Display price in formatted way -->
                            <td class='text-end ${colorText}'>
                                <input class="form-control qty-input" min="1" type="number" value="${detail.qty}" data-product-id="${detail.p_product_id}" readonly>
                            </td> <!-- Display qty value -->
                            <td class='text-end ${colorText}' data-product-id="${detail.p_product_id}">${formatPrice(totalPrice)}</td> <!-- Display total price -->
                        </tr>
                    `;
                    }

                    if ((statusBtn == 1) && (Number(detail.qty) > (Number(detail.s_qty) -
                        Number(detail.sub_qty)))) {
                        console.log(detail.qty + '/' + detail.s_qty);
                        productDetails += `
                                        <tr>
                                            <td colspan="10">
                                                <div class="alert alert-danger" role="alert">
                                                    Quantity exceeds available stock! Stock is: ${detail.s_qty - detail.sub_qty}
                                                </div>
                                            </td>
                                        </tr>
                                        `;
                    }

                    number++;
                });

                // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                const totalRow = `
    <tr>
        <td colspan="8" class="text-end">Total:</td>
        <td colspan="2" class="text-end ${colorText}" id="totalAmount">${formatPrice(allTotal)}</td>
    </tr>
    `;
                $('#productDetails').html(productDetails + totalRow); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Modal
                $('#previewModal').modal('show'); // ‡πÄ‡∏õ‡∏¥‡∏î Modal

                // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ qty
                $('.qty-input').on('change', function () {
                    updateTotals();
                });
            },
            error: function () {
                $('#productDetails').html(
                    '<tr><td colspan="7">Error loading product details.</td></tr>');
                $('#previewModal').modal('show');
            }
        });
    }
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ qty ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    function updateTotals() {
        let allTotal = 0;

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÉ‡∏´‡∏°‡πà
        $('#productDetails tr').each(function () {
            const qtyInput = $(this).find('.qty-input');
            const productId = qtyInput.data('product-id');
            const qty = parseFloat(qtyInput.val()) || 0;
            const price = parseFloat($(this).find('td').eq(7).text().replace(/[^0-9.-]+/g, "")) ||
                0; // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            const totalPrice = qty * price;
            allTotal += totalPrice;
            $(this).find('td').eq(9).text(formatPrice(totalPrice)); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ß‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        $('#totalAmount').text(formatPrice(allTotal));
    }


    function formatPrice(price) {
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≥
        return parseFloat(price).toLocaleString('en-US', {
            style: 'currency',
            currency: 'THB'
        }); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏ó‡∏¢

    }

    /* --------------------------------------------------------------- */
    //‡∏î‡∏π substock store ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    $(document).on('click', '.info-icon', function (e) {
        e.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô default link behavior

        var productId = $(this).data('product-id'); // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Product ID

        // ‡∏™‡πà‡∏á AJAX ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        $.ajax({
            url: 'ajax_GET/get_sub_stock_details.php',
            type: 'POST',
            data: { p_product_id: productId },
            success: function (data) {
                var details = JSON.parse(data);
                if (details.length === 0) {
                    alert("No stock details available.");
                    return;
                }

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô Modal
                $('#modalOtherStockLabel').html(`${details[0].p_product_code} 
                        ${details[0].p_product_name}
                        ${details[0].p_hands} 
                        ${details[0].p_color} 
                        ${details[0].p_size}`);

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                let rows = `
                <tr class="text-center table-info">
                   <th>Location</th>
                   <th>QTY</th>
                </tr>
            `;

                var total = 0;
                $.each(details, function (index, item) {
                    rows += `
                <tr>
                    <td class="text-primary">${item.sub_name}</td>
                    <td class="text-end">${item.sub_qty}</td>
                </tr>`;
                    total += parseInt(item.sub_qty);
                });

                // ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                rows += `
                <tr>
                    <td><strong>Total:</strong></td>
                    <td class="text-end"><strong>${total}</strong></td>
                </tr>
            `;

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô Modal
                $('#stockModal tbody').html(rows);

                // ‡πÄ‡∏õ‡∏¥‡∏î Modal
                $('#previewStockModal').modal('show');
            },
            error: function () {
                alert('Error loading sub stock details.');
            }
        });
    });


});
